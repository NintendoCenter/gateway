// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameCollectionClient is the client API for GameCollection service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameCollectionClient interface {
	GetGame(ctx context.Context, in *GetGameRequest, opts ...grpc.CallOption) (*Game, error)
	FindGame(ctx context.Context, in *FindGameRequest, opts ...grpc.CallOption) (*FindGameResponse, error)
}

type gameCollectionClient struct {
	cc grpc.ClientConnInterface
}

func NewGameCollectionClient(cc grpc.ClientConnInterface) GameCollectionClient {
	return &gameCollectionClient{cc}
}

func (c *gameCollectionClient) GetGame(ctx context.Context, in *GetGameRequest, opts ...grpc.CallOption) (*Game, error) {
	out := new(Game)
	err := c.cc.Invoke(ctx, "/game_collection.GameCollection/GetGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameCollectionClient) FindGame(ctx context.Context, in *FindGameRequest, opts ...grpc.CallOption) (*FindGameResponse, error) {
	out := new(FindGameResponse)
	err := c.cc.Invoke(ctx, "/game_collection.GameCollection/FindGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameCollectionServer is the server API for GameCollection service.
// All implementations should embed UnimplementedGameCollectionServer
// for forward compatibility
type GameCollectionServer interface {
	GetGame(context.Context, *GetGameRequest) (*Game, error)
	FindGame(context.Context, *FindGameRequest) (*FindGameResponse, error)
}

// UnimplementedGameCollectionServer should be embedded to have forward compatible implementations.
type UnimplementedGameCollectionServer struct {
}

func (UnimplementedGameCollectionServer) GetGame(context.Context, *GetGameRequest) (*Game, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGame not implemented")
}
func (UnimplementedGameCollectionServer) FindGame(context.Context, *FindGameRequest) (*FindGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindGame not implemented")
}

// UnsafeGameCollectionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameCollectionServer will
// result in compilation errors.
type UnsafeGameCollectionServer interface {
	mustEmbedUnimplementedGameCollectionServer()
}

func RegisterGameCollectionServer(s grpc.ServiceRegistrar, srv GameCollectionServer) {
	s.RegisterService(&GameCollection_ServiceDesc, srv)
}

func _GameCollection_GetGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameCollectionServer).GetGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game_collection.GameCollection/GetGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameCollectionServer).GetGame(ctx, req.(*GetGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameCollection_FindGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameCollectionServer).FindGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game_collection.GameCollection/FindGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameCollectionServer).FindGame(ctx, req.(*FindGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameCollection_ServiceDesc is the grpc.ServiceDesc for GameCollection service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameCollection_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game_collection.GameCollection",
	HandlerType: (*GameCollectionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGame",
			Handler:    _GameCollection_GetGame_Handler,
		},
		{
			MethodName: "FindGame",
			Handler:    _GameCollection_FindGame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/protos/game-collection.proto",
}
